#include "esp_camera.h"
#include "Base64.h"


#define CAMERA_MODEL_AI_THINKER
#include "camera_pins.h"

void setup() {
  Serial.begin(115200);
  delay(1000);


  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer   = LEDC_TIMER_0;
  config.pin_d0       = Y2_GPIO_NUM;
  config.pin_d1       = Y3_GPIO_NUM;
  config.pin_d2       = Y4_GPIO_NUM;
  config.pin_d3       = Y5_GPIO_NUM;
  config.pin_d4       = Y6_GPIO_NUM;
  config.pin_d5       = Y7_GPIO_NUM;
  config.pin_d6       = Y8_GPIO_NUM;
  config.pin_d7       = Y9_GPIO_NUM;
  config.pin_xclk     = XCLK_GPIO_NUM;
  config.pin_pclk     = PCLK_GPIO_NUM;
  config.pin_vsync    = VSYNC_GPIO_NUM;
  config.pin_href     = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn     = PWDN_GPIO_NUM;
  config.pin_reset    = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;


  config.frame_size = FRAMESIZE_QVGA;  // 320x240
  config.jpeg_quality = 10;           
  config.fb_count = 1;


  if (esp_camera_init(&config) != ESP_OK) {
    Serial.println(" Camera init failed");
    while (true);
  }
}

void loop() {

  camera_fb_t * fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println(" Failed to capture image");
    delay(12000);
    return;
  }

  String imageBase64 = base64::encode(fb->buf, fb->len);

  Serial.println("=== Base64 Image Start ===");
  Serial.println(imageBase64);
  Serial.println("=== Base64 Image End ===");

  
  esp_camera_fb_return(fb);

  delay(12000);
}